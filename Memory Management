MEMORY MANAGEMENT
STARTED 08/31/2021
COMPLETED 08/31/2021
--------------------------------------------
Working With Memory
When variables are declared, C automatically allocates space in an area of memory called the stack.
If program explicitly declares a basic data type or array size, memory is automatically managed.

Dynamic memory allocation is the process of allocating and freeing memory as needed.
Prompt at runtime for the number of array elements and then create an array with that many elements.
Dynamic memory managed with pointers that point to newly allocated blocks of memory in an area called the heap.

Statically managed data in main memory for variables that persist for the lifetime of the program.

stdlib.h library includes memory management functions.
malloc(bytes)   Returns a pointer to a contiguous block of memory that is of size bytes.
calloc(num_items, item_size) Returns a pointer to a contiguous block of memory that has num_items items, each of size item_size bytes. Typically used for arrays, structures, and other derived data types. Allocated memory is initialized to 0.
realloc(ptr, bytes)    Resizes the memory pointed to by ptr to size bytes. The newly allocated memory is not initialized.
free(ptr)    Releases the block of memory pointed to by ptr.

When a block of allocated memory is no longer needed, use free() to make the block available to allocation again.
--------------------------------------------
The malloc Function
The malloc() function allocates a specified number of contiguous bytes in memory.

#include <stdlib.h>

int *ptr;
ptr = malloc(10 * sizeof(*ptr)); // Allocate 10 ints worth of space

if (ptr != NULL) {
    *(ptr + 2) = 50; // Set the 3rd element to value 50
}

The allocated memory is contiguous and can be treated as an array.
Pointer arithmetic used to traverse the array. Encouraged to use + to refer to array lements.
If the allocation is unsuccessful, NULL is returned. Check for a NULL pointer in code.

A two-dimensional array requires (rows*columns)*sizeof(datatype) bytes of memory.

The free() function releases memory. By freeing it, you make more available for later use.
free(ptr);
--------------------------------------------
calloc and realloc
calloc() function allocates memory based on the size of a specific item, like a structure.
calloc allocates blocks of memory within a contiguous block of memory for an array of structure elements. Navigate structures with pointer arithmetic.
After allocating room for a structure, memory must be allocated for strings within the structure. Using a pointer allows any length string to be stored.

Dynamically allocated structures are the basis of linked lists and binary trees.

typedef struct {
    int num;
    char *info;
} record;

record *recs;
int num_recs = 2;
int k;
char str[ ] = "This is information";

recs = calloc(num_recs, sizeof(record));
if (recs != NULL) {
    for (k = 0; k < num_recs; k++) {
        (recs + k)->num = k;
        (recs + k)->info = malloc(sizeof(str));
        strcpy((recs + k)->info, str);
    }
}

realloc() function expands a current block to include additional memory
realloc leaves the original content in memory and expands the block to allow for more storage
--------------------------------------------
Dynamic Strings & Arrays
May want to use string length rather than sizeof for calculating bytes for string pointer.

char str20[20];
char *str = NULL;

strcpy(str20, "12345");
str = malloc(strlen(str20)+1);
strcpy(str, str20);
printf("%s", str);

Better memory management because you aren't allocating more space than needed.
Use strlen to determine the number of bytes, then add 1 for NULL character '\0'
A char is always one byte, so there is no need to multiply the memory requirements by sizeof(char)

Most algorithms implement a dynamic array because this allows the number of elemets to change.
Because elements are not allocated all at once, dynamic arrays typically use a structure to keep track of array size, current capacity, and a point to the elements.

typedef struct {
    int *elements;
    int size;
    int cap;
} dyn_array;

dyn_array arr;

arr.size = 0;
arr.elements = calloc(1, sizeof(*arr.elements) );
arr.cap = 1;

// expand by more elements
arr.elements = realloc(arr.elements, (5 + arr.cap) * sizeof(*arr.elements));
if (arr.elements != NULL)
    arr.cap += 5;

if (arr.size < arr.cap) {
    arr.elements[arr.size] = 50;
    arr.size++;
} else {
    printf("Need to expand the array.")
}